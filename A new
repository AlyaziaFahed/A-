import heapq
import random
from datetime import datetime, timedelta
import calendar



# 001: SocialMediaPost class definition
class SocialMediaPost:
    """class represnt social media post """
    def __init__(self, datetime, post, person, views=0):
        self.datetime = datetime
        self.post = post
        self.person = person
        self.views = views

    def __lt__(self, other):
        # This ensures that the SocialMediaPost objects are compared based on views when placed in the heap #without this u wount be able to print more than 9999 post
        return self.views < other.views

    def __repr__(self):
        return f"{self.datetime} - {self.post} by {self.person} ({self.views} views)"

# 002: Hash Table for quick access by datetime
posts_by_datetime = {}

def add_post_to_dict(post): #Defines a function to add a post to the dictionary.
    posts_by_datetime[post.datetime] = post #Stores the post in the dictionary with the post's datetime as the key.

def get_post_by_datetime_from_dict(datetime): #Defines a function to retrieve a post from the dictionary using its datetime.
    return posts_by_datetime.get(datetime, None) # Returns the post associated with the given datetime, or None if no such post exists.

# 003: Binary Search Tree for efficient range queries
class Node:
    """class reprsenting node """
    def __init__(self, post, datetime):
        self.post = post          # Stores the post object
        self.datetime = datetime  # Stores the datetime of the post for comparison act also as a key
        self.left = None          # Pointer to the left child Node
        self.right = None         # Pointer to the right child Node

class AVLNode(Node):
    """class reprsent AVL"""
    def __init__(self, post, datetime):
        super().__init__(post, datetime)# Initialize the base Node class
        self.height = 1  # Set initial node height to 1 for AVL balancing

class SocialMediaManager:
    """ class represnt social media manager"""
    def __init__(self):
        self.root = None  # Initialize the root as None when the manager is created - AVL tree starts empty

    def _height(self, node):
        """ Return node height or 0 if node is None """
        if not node: # If node is None, return 0
            return 0
        return node.height # Otherwise, return the height of the node

    def _update_height(self, node):
        """ Update node's height based on its children's heights """
        node.height = max(self._height(node.left), self._height(node.right)) + 1 # Update the node's height based on its children

    def _balance_factor(self, node):
        """ Calculate node's balance factor to check for imbalances """
        if not node: # If node is None, its balance factor is 0
            return 0
        return self._height(node.left) - self._height(node.right) # Balance factor is left child's height minus right child's height

    def _rotate_right(self, y):
        """ Perform right rotation around node y to restore balance """
        x = y.left # Set x to y's left child
        T2 = x.right  # Temporary store x's right child
        x.right = y # y becomes x's right child
        y.left = T2 # T2 becomes y's left child
        self._update_height(y) # Update the height of y
        self._update_height(x)  # Update the height of x
        return x  # Return new root of the subtree

    def _rotate_left(self, x):
        """ Perform left rotation around node x to restore balance """
        y = x.right  # Set y to x's right child
        T2 = y.left  # Temorary store y's left child
        y.left = x # x becoms y's left child
        x.right = T2 # T2 becomes x's right child
        self._update_height(x) # Updat the height of x
        self._update_height(y) # Update the height of y
        return y  # Return new rot of the subtree

    def _rebalance(self, node, post_datetime):
        """ Rebalance AVL tree after insertion to maintain properties """
        if not node: # If node is Non there is nothing to rebalance
            return node

        self._update_height(node) # Update height of the current node
        balance = self._balance_factor(node)  # Calculate balance factor to check if node is unbalanced

        # Left Left Case (  If node is left heavy and the post date is older than left child's date do right rotation)
        if balance > 1 and post_datetime < node.left.datetime:
            return self._rotate_right(node)

        # Right Right Case (If node is right heavy and the post date is newer than right child's date do left rotation)
        if balance < -1 and post_datetime > node.right.datetime:
            return self._rotate_left(node)

        # Left Right Case ( If node is left heavy but the post date is newer than left child's date do left-right rotation)
        if balance > 1 and post_datetime > node.left.datetime:
            node.left = self._rotate_left(node.left)  #First left rotation on left child
            return self._rotate_right(node)

        # Right Left Case - same as above
        if balance < -1 and post_datetime < node.right.datetime:
            node.right = self._rotate_right(node.right)
            return self._rotate_left(node)

        return node

    def add_post_to_avl(self, post):
        """ Insert a new post into AVL tree """
        post_datetime = datetime.strptime(post.datetime, "%Y-%m-%d %H:%M:%S") # Convert date and time from string to a datetime object
        if not self.root:
            self.root = AVLNode(post, post_datetime) # If the tree is empt set the new post as the root node
        else:  # If the tree is not empty insert the post into the tree
            self.root = self._insert_avl(self.root, post, post_datetime)

    def _insert_avl(self, node, post, post_datetime):
        """ Insert node recursively and rebalance """
        if not node: # If current spot is empt insert the node here
            return AVLNode(post, post_datetime)
        if post_datetime < node.datetime: # If the post's date is earlier insert into the left subtree
            node.left = self._insert_avl(node.left, post, post_datetime)
        else: # If the post's date is the same or later, insert into the right subtree
            node.right = self._insert_avl(node.right, post, post_datetime)
         #rebalance the tree starting from the current node
        return self._rebalance(node, post_datetime)

    def get_posts_in_range_from_bst(self, start_datetime, end_datetime):
        """ Collect posts within a dat range """
        result = [] #  empty list to collect posts
        self._get_range(self.root, start_datetime, end_datetime, result)  # Start traversing the tree from the root to find and collect posts in the date range
        return result # Return the collected list of posts

    def _get_range(self, node, start_datetime, end_datetime, result):
        """ Traverse tree and collect posts in he given range """
        if node is not None: # If the current node is not None, proceed with traversal
            # Check left subtree if it might contain relevant posts
            if start_datetime <= node.datetime:
                self._get_range(node.left, start_datetime, end_datetime, result)
            # Include this node's post if it's within the range
            if start_datetime <= node.datetime <= end_datetime:
                result.append(node.post)
            # Check right subtree if it might contain relevant posts
            if node.datetime <= end_datetime:
                self._get_range(node.right, start_datetime, end_datetime, result)

    def get_posts_in_month_year_range_from_bst(self, start_month_year, end_month_year):
        """ Convert month-year to datetime and query posts in range """
        # Create datetime objects for the start and end of the month range
        start_datetime = datetime(start_month_year.year, start_month_year.month, 1)
        last_day_of_end_month = calendar.monthrange(end_month_year.year, end_month_year.month)[1]
        end_datetime = datetime(end_month_year.year, end_month_year.month, last_day_of_end_month)

        # Return the result of the range query
        return self.get_posts_in_range_from_bst(start_datetime, end_datetime)


# 004: Heap for prioritizing posts by views
class PostHeap:
    def __init__(self):
        self.heap = [] # Initializes an empty list to be used as a heap

    def add_post_to_heap(self, post): # Defines a method to add a new post to the heap
        heapq.heappush(self.heap, (-post.views, post)) # Uses the heappush function from the heapq module to add a new element to the heap.
 # The heap is organized by the number of views in descending order, so we negate the view count (-post.views) because Pythonâ€™s heapq module implements a min-heap by default. By negating the views, the post with the highest views will be at the root of the heap
    def get_most_viewed_post_from_heap(self): # Defines a method to retrieve and remove the post with the highest view count from the heap.
        if self.heap: # Checks if the heap is not empty
            return heapq.heappop(self.heap)[1] #the heappop function from the heapq module to remove and return the smallest element from the heap (which is actually the post with the highest views because of the negation)
        # The [1] accesses the post object, as the heap elements are tuples where the first element is -post.views and the second element is the post object itself.
        return None

    def peek_most_viewed_post(self): #To simply view the post with the highest views without removing it from the heap.
        if self.heap:
            # Returns the post with the highest view count without removing it from the heap.
            return self.heap[0][1]
        return None

# 005: Utility function to generate random posts
# Assuming 'add_post_to_bst' has been replaced with 'add_post_to_avl' in your SocialMediaManager class
def generate_random_posts(num_posts, max_users=100):
    base_datetime = datetime.now() # Current date and time as the base for generating post dates
    persons = [f"User{i}" for i in range(1, max_users + 1)] # List of user names from User1 to UserN
    texts = ["Post about the weather", "Post about sports", "Post about cooking", "Post about traveling", "Post about studying", "Post about eid", "Post about ramadan", "Post about holiday"] # List of predefined post topics
    manager = SocialMediaManager()# Initialize the BST manager for posts
    post_heap = PostHeap() # Initialize the heap for managing posts by views

    for _ in range(num_posts):
        # Randomize datetime within a range starting from the base_datetime to now
        random_datetime = base_datetime - timedelta(days=random.randint(0, 365), hours=random.randint(0, 24), minutes=random.randint(0, 60))# Generate a random past datetime for the post
        random_person = random.choice(persons) # Randomly select a user for the post
        random_text = random.choice(texts) # Randomly select a topic for the post
        random_views = random.randint(0, 100000) # Generate a random view count
        new_post = SocialMediaPost(datetime=random_datetime.strftime("%Y-%m-%d %H:%M:%S"), post=random_text, person=random_person, views=random_views) # Create a new post object
        # Construct the post with a timestamp, content, author, and view count
        manager.add_post_to_avl(new_post) # Add the post to the binary search tree
        post_heap.add_post_to_heap(new_post) # Add the post to the heap
        add_post_to_dict(new_post)  # Add the post to the dictionary(hashtbales)

    return manager, post_heap # Return the AVL tree and heap containing the posts


# 006: Main program execution
def handle_month_year_input(prompt):
    while True:
        month_year_str = input(prompt)  #give user for a datetime input
        try:
            # chnage the input and create a datetime object for the first day of the month
            return datetime.strptime(month_year_str, "%Y-%m") # Return the parsed datetime object
        except ValueError:
            print("Invalid format. Please enter the month and year in YYYY-MM format.") # Error message for invalid input

if __name__ == "__main__":
    try:
        num_posts = int(input("How many posts would you like to generate? "))  # Ask user for the number of posts to generate
        if num_posts < 1:
            raise ValueError("Number of posts must be at least 1.")
        manager, post_heap = generate_random_posts(num_posts)  # Generate posts and obtain manager and heap objects

        # Sort posts by views and assign unique IDs
        def get_views(post):
            return post.views

        sorted_posts = sorted(posts_by_datetime.values(), key=get_views, reverse=True)  # Sort posts by views in descending order
        posts_with_ids = {f"{i:03}": post for i, post in enumerate(sorted_posts, 1)}  # Assign unique IDs to sorted posts

        print("\nGenerated Posts - sorted by views:")  # header for sorted posts
        for post_id, post in posts_with_ids.items():  # Loop through posts and print them with IDs
            print(f"{post_id}: {post}")

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


    while True:  # Start an infinite loop for user actions
        print("\nSelect an action:") # Display the menu of actions
        print("1 - Get a post by date")
        print("2 - Display the most viewed post")
        print("3 - Get posts in a specific time range")
        print("4 - Display all posts")
        print("5 - Exit")

        action = input("Enter your choice (1-5): ")  # Get user input for action choice
        if action == "1":  #If user selects to get a post by date
            date_str = input("Enter the date and time (YYYY-MM-DD HH:MM:SS): ")
            post = get_post_by_datetime_from_dict(date_str)  # Retrieve the post for the given date
            print("Post:", post) # Display the retrieved post
        elif action == "2":  # If user wants to see the most viewed post
            most_viewed = post_heap.get_most_viewed_post_from_heap() # Get the most viewed post from the heap
            if most_viewed:
                print("Most viewed post:", most_viewed) # Display the most viewed post
            else:
                print("No posts available.") #else print this
        elif action == "3": # If user selects to get posts in a time range
            start_month_year = handle_month_year_input("Enter the start month and year (YYYY-MM): ") # Get start month/year
            end_month_year = handle_month_year_input("Enter the end month and year (YYYY-MM): ") # Get end month/year
                # Check if the start date is earlier than the end date
            if start_month_year < end_month_year:
                    # Proceed with the BST query
                posts_in_range = manager.get_posts_in_month_year_range_from_bst(start_month_year, end_month_year) # Retrieve posts in range
                for post in posts_in_range: # Loop through the posts in range and display them
                    print(post)
            else:
                    # Display the message only if the start date is not earlier than the end date
                print("The start date must be earlier than the end date. Please try again.")
        elif action == "4": #is they want to display again all posys
            # option to display all posts
            for post_id, post in posts_by_datetime.items(): #loop from items
                print(f"{post_id}: {post}") #print
        elif action == "5": # If user chooses to exit
            print("Thank you for using the post management system. Goodbye!") # Goodbye message
            break # Break the loop to exit
        else:
            print("Invalid action, try again.") # Message for invalid action input
